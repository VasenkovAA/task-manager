# Generated by Django 5.0.4 on 2025-06-05 18:54

import django.core.validators
import django.db.models.deletion
import simple_history.models
import taggit.managers
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        (
            "taggit",
            "0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx",
        ),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Link",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        help_text="Уникальный URL-адрес", max_length=500, unique=True
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Дата создания ссылки"
                    ),
                ),
            ],
            options={
                "verbose_name": "Ссылка",
                "verbose_name_plural": "Ссылки",
            },
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Название места выполнения задачи", max_length=100
                    ),
                ),
                (
                    "address",
                    models.TextField(
                        blank=True, help_text="Полный адрес места", null=True
                    ),
                ),
                (
                    "coordinates",
                    models.CharField(
                        blank=True,
                        help_text="Координаты в формате 'широта,долгота'",
                        max_length=50,
                        null=True,
                    ),
                ),
            ],
            options={
                "verbose_name": "Местоположение",
                "verbose_name_plural": "Местоположения",
            },
        ),
        migrations.CreateModel(
            name="NotificationMethod",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Название метода уведомления (например: email, telegram)",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "config",
                    models.JSONField(
                        default=dict,
                        help_text="Конфигурация метода уведомления в формате JSON",
                    ),
                ),
            ],
            options={
                "verbose_name": "Метод уведомления",
                "verbose_name_plural": "Методы уведомления",
            },
        ),
        migrations.CreateModel(
            name="TaskCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        error_messages={
                            "unique": "Категория с таким названием уже существует"
                        },
                        help_text="Уникальное название категории",
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Описание категории задач", null=True
                    ),
                ),
            ],
            options={
                "verbose_name": "Категория задач",
                "verbose_name_plural": "Категории задач",
            },
        ),
        migrations.CreateModel(
            name="HistoricalTask",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        db_index=True,
                        error_messages={
                            "unique": "Задача с таким названием уже существует"
                        },
                        help_text="Уникальное название задачи",
                        max_length=200,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Подробное описание задачи", null=True
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=5,
                        help_text="Приоритет по 10-балльной шкале",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("waiting", "Ожидает начала"),
                            ("progress", "В процессе"),
                            ("done", "Завершена"),
                            ("canceled", "Отменена"),
                        ],
                        default="waiting",
                        help_text="Текущий статус выполнения задачи",
                        max_length=20,
                    ),
                ),
                (
                    "progress",
                    models.IntegerField(
                        default=0,
                        help_text="Прогресс выполнения в процентах",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="Дата и время создания задачи",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="Дата и время последнего обновления",
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Планируемая дата и время начала выполнения",
                        null=True,
                    ),
                ),
                (
                    "end_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Планируемая дата и время завершения",
                        null=True,
                    ),
                ),
                (
                    "deadline",
                    models.DateTimeField(
                        blank=True,
                        help_text="Крайний срок выполнения задачи",
                        null=True,
                    ),
                ),
                (
                    "complexity",
                    models.IntegerField(
                        default=5,
                        help_text="Сложность задачи по 10-балльной шкале",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "risk_level",
                    models.CharField(
                        choices=[
                            ("low", "Низкий"),
                            ("medium", "Средний"),
                            ("high", "Высокий"),
                        ],
                        default="low",
                        help_text="Уровень риска выполнения задачи",
                        max_length=10,
                    ),
                ),
                (
                    "is_ready",
                    models.BooleanField(
                        default=False, help_text="Можно начинать выполнение"
                    ),
                ),
                (
                    "is_recurring",
                    models.BooleanField(
                        default=False, help_text="Периодическая задача"
                    ),
                ),
                (
                    "needs_approval",
                    models.BooleanField(
                        default=False, help_text="Требует утверждения завершения"
                    ),
                ),
                (
                    "is_template",
                    models.BooleanField(
                        default=False, help_text="Использовать как шаблон"
                    ),
                ),
                (
                    "estimated_time",
                    models.DurationField(
                        blank=True, help_text="Планируемое время выполнения", null=True
                    ),
                ),
                (
                    "actual_time",
                    models.DurationField(
                        blank=True, help_text="Фактическое время выполнения", null=True
                    ),
                ),
                (
                    "quality_rating",
                    models.IntegerField(
                        blank=True,
                        help_text="Оценка качества выполнения (1-5)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "budget",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Бюджет задачи",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "cancel_reason",
                    models.TextField(
                        blank=True, help_text="Причина отмены задачи", null=True
                    ),
                ),
                (
                    "time_intervals",
                    models.JSONField(
                        blank=True,
                        default="",
                        help_text="Временные интервалы выполнения задачи",
                        null=True,
                    ),
                ),
                (
                    "reminders",
                    models.JSONField(
                        blank=True,
                        default="",
                        help_text="Напоминания о задаче",
                        null=True,
                    ),
                ),
                (
                    "repeat_interval",
                    models.DurationField(
                        blank=True,
                        help_text="Интервал повторения для периодических задач",
                        null=True,
                    ),
                ),
                (
                    "next_activation",
                    models.DateTimeField(
                        blank=True,
                        help_text="Дата следующей активации периодической задачи",
                        null=True,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "assignee",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Ответственный исполнитель",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Создатель задачи",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "last_editor",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Последний пользователь, редактировавший задачу",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="Место выполнения задачи",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="tasks.location",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Задача",
                "verbose_name_plural": "historical Задачи",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        error_messages={
                            "unique": "Задача с таким названием уже существует"
                        },
                        help_text="Уникальное название задачи",
                        max_length=200,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True, help_text="Подробное описание задачи", null=True
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        default=5,
                        help_text="Приоритет по 10-балльной шкале",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("waiting", "Ожидает начала"),
                            ("progress", "В процессе"),
                            ("done", "Завершена"),
                            ("canceled", "Отменена"),
                        ],
                        default="waiting",
                        help_text="Текущий статус выполнения задачи",
                        max_length=20,
                    ),
                ),
                (
                    "progress",
                    models.IntegerField(
                        default=0,
                        help_text="Прогресс выполнения в процентах",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Дата и время создания задачи"
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True, help_text="Дата и время последнего обновления"
                    ),
                ),
                (
                    "start_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Планируемая дата и время начала выполнения",
                        null=True,
                    ),
                ),
                (
                    "end_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Планируемая дата и время завершения",
                        null=True,
                    ),
                ),
                (
                    "deadline",
                    models.DateTimeField(
                        blank=True,
                        help_text="Крайний срок выполнения задачи",
                        null=True,
                    ),
                ),
                (
                    "deleted_at",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="Дата и время удаления задачи",
                        null=True,
                    ),
                ),
                (
                    "complexity",
                    models.IntegerField(
                        default=5,
                        help_text="Сложность задачи по 10-балльной шкале",
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "risk_level",
                    models.CharField(
                        choices=[
                            ("low", "Низкий"),
                            ("medium", "Средний"),
                            ("high", "Высокий"),
                        ],
                        default="low",
                        help_text="Уровень риска выполнения задачи",
                        max_length=10,
                    ),
                ),
                (
                    "is_ready",
                    models.BooleanField(
                        default=False, help_text="Можно начинать выполнение"
                    ),
                ),
                (
                    "is_recurring",
                    models.BooleanField(
                        default=False, help_text="Периодическая задача"
                    ),
                ),
                (
                    "needs_approval",
                    models.BooleanField(
                        default=False, help_text="Требует утверждения завершения"
                    ),
                ),
                (
                    "is_template",
                    models.BooleanField(
                        default=False, help_text="Использовать как шаблон"
                    ),
                ),
                (
                    "is_deleted",
                    models.BooleanField(
                        default=False, editable=False, help_text="Флаг удаления задачи"
                    ),
                ),
                (
                    "estimated_time",
                    models.DurationField(
                        blank=True, help_text="Планируемое время выполнения", null=True
                    ),
                ),
                (
                    "actual_time",
                    models.DurationField(
                        blank=True, help_text="Фактическое время выполнения", null=True
                    ),
                ),
                (
                    "quality_rating",
                    models.IntegerField(
                        blank=True,
                        help_text="Оценка качества выполнения (1-5)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                (
                    "version",
                    models.IntegerField(
                        default=1,
                        editable=False,
                        help_text="Версия задачи (счетчик изменений)",
                    ),
                ),
                (
                    "budget",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Бюджет задачи",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "cancel_reason",
                    models.TextField(
                        blank=True, help_text="Причина отмены задачи", null=True
                    ),
                ),
                (
                    "time_intervals",
                    models.JSONField(
                        blank=True,
                        default="",
                        help_text="Временные интервалы выполнения задачи",
                        null=True,
                    ),
                ),
                (
                    "reminders",
                    models.JSONField(
                        blank=True,
                        default="",
                        help_text="Напоминания о задаче",
                        null=True,
                    ),
                ),
                (
                    "repeat_interval",
                    models.DurationField(
                        blank=True,
                        help_text="Интервал повторения для периодических задач",
                        null=True,
                    ),
                ),
                (
                    "next_activation",
                    models.DateTimeField(
                        blank=True,
                        help_text="Дата следующей активации периодической задачи",
                        null=True,
                    ),
                ),
                (
                    "assignee",
                    models.ForeignKey(
                        blank=True,
                        help_text="Ответственный исполнитель",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="assigned_tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        help_text="Создатель задачи",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="created_tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "dependencies",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Задачи, от которых зависит текущая",
                        related_name="task_dependencies",
                        to="tasks.task",
                    ),
                ),
                (
                    "last_editor",
                    models.ForeignKey(
                        blank=True,
                        help_text="Последний пользователь, редактировавший задачу",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="edited_tasks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        help_text="Место выполнения задачи",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="tasks.location",
                    ),
                ),
                (
                    "notifications",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Способы уведомления о задаче",
                        to="tasks.notificationmethod",
                    ),
                ),
                (
                    "tags",
                    taggit.managers.TaggableManager(
                        blank=True,
                        help_text="Теги для классификации задач",
                        through="taggit.TaggedItem",
                        to="taggit.Tag",
                        verbose_name="Tags",
                    ),
                ),
                (
                    "categories",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Категории задачи",
                        to="tasks.taskcategory",
                    ),
                ),
            ],
            options={
                "verbose_name": "Задача",
                "verbose_name_plural": "Задачи",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="FileAttachment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        help_text="Прикрепленный файл",
                        upload_to="task_attachments/%Y/%m/%d/",
                    ),
                ),
                (
                    "uploaded_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Время загрузки файла"
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="Описание файла",
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        help_text="Связанная задача",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attachments",
                        to="tasks.task",
                    ),
                ),
            ],
            options={
                "verbose_name": "Файловое вложение",
                "verbose_name_plural": "Файловые вложения",
            },
        ),
        migrations.CreateModel(
            name="TaskLink",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="Описание связи",
                        max_length=200,
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True, help_text="Дата создания связи"
                    ),
                ),
                (
                    "link",
                    models.ForeignKey(
                        help_text="Связанная ссылка",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tasks.link",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        help_text="Связанная задача",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="tasks.task",
                    ),
                ),
            ],
            options={
                "verbose_name": "Связь задачи со ссылкой",
                "verbose_name_plural": "Связи задач со ссылками",
                "unique_together": {("task", "link")},
            },
        ),
        migrations.AddField(
            model_name="task",
            name="links",
            field=models.ManyToManyField(
                blank=True,
                help_text="Связанные URL-ссылки",
                through="tasks.TaskLink",
                to="tasks.link",
            ),
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("graph_settings", models.JSONField(blank=True, default=dict)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["is_deleted", "status"], name="tasks_task_is_dele_e9233e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="task",
            index=models.Index(
                fields=["deadline"], name="tasks_task_deadlin_736196_idx"
            ),
        ),
    ]
